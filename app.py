from flask import Flask,render_template,redirect,request,session,url_for,flash
import ibm_db
from datetime import datetime
from bs4 import BeautifulSoup
import requests

status = 'dev'
dsn = "DATABASE=BLUDB;HOSTNAME=dashdb-txn-sbox-yp-dal09-11.services.dal.bluemix.net;PORT=50000;PROTOCOL=TCPIP;UID=nsg21758;PWD=wjvgd9f-gfndl0cj;"

app = Flask(__name__)
app.secret_key = "grm project"

def check_correct_login(cat):
    try:
        if(session["login"] == True and session["cat"] == cat):
            return True
        else:
            return False
    except:
        return False

# HOME PAGE
# here's a link you can use to get an idea of the schema - http://dontpad.com/ibm_grm_health_tracker/db2
@app.route("/",methods = ["GET","POST"])
@app.route("/login",methods = ["GET","POST"])
def login():
    try:
        if(session["login"]):
            pass
    except:
        session["login"] = False
        session["user_id"] = -1
        session["username"] = ""
        session["cat"] = ""

    if(request.method == "POST"):
        try:
            name = int(request.form["id"])
        except:
            flash("User ID is numeric !", category="error")
            return redirect(url_for('login'))
        password = request.form["password"]
        conn = ibm_db.connect(dsn,"","")
        sql = "select * from USERS where user_id = "+str(name)+" and password = '"+password+"';"
        res = ibm_db.exec_immediate(conn,sql)
        k = ibm_db.fetch_assoc(res)
        ibm_db.close(conn)
        if(k==False):
            flash("Invalid Credentials !!!",category="error")
            return render_template("login.html")

        else:
            session["user_id"] = k["USER_ID"]
            session["username"] = k["USERNAME"]
            session["cat"] = k["CATEGORY"]
            session["login"] = True
            cat = k["CATEGORY"]
            if(cat== "p"):
                session["cat"] = "p"
                return redirect(url_for('p_home'))
            elif(cat== "d"):
                session["cat"] = "d"
                return redirect(url_for('d_home'))
            elif(cat== "h"):
                session["cat"] = "h"
                return redirect(url_for('h_home'))

    return render_template("login.html")

@app.route("/logout",methods = ["GET","POST"])
def logout():
    session.pop("login",False)
    session.pop("cat","")
    session.pop("user_id",-1)
    flash("Successfully Logged Out!")
    return redirect(url_for('login'))


##############################################
##### PATIENT ################################
##############################################
@app.route("/patient")
def p_home():
    if(check_correct_login("p")):
        conn = ibm_db.connect(dsn,"","")
        sql = "select * from patient where user_id ="+str(session["user_id"])+";"
        res = ibm_db.exec_immediate(conn,sql)
        patient = ibm_db.fetch_assoc(res)
        sql = "select * from general_records where user_id ="+str(session["user_id"])+" order by date_of_check desc;"
        res = ibm_db.exec_immediate(conn,sql)
        recs = []
        k = ibm_db.fetch_assoc(res)
        
        while(k):
            recs.append(k)
            k = ibm_db.fetch_assoc(res)
        ibm_db.close(conn)
        return render_template("p_home.html",patient = patient,records = recs)

    else:
        flash("Patient Login Required !", category="error")
        return redirect(url_for('login'))
    
    
@app.route("/patient/news")
def news():
    if(check_correct_login("p")):
        result = requests.get("https://www.who.int/csr/don/archive/year/2020/en/")
        soup = BeautifulSoup(result.text,'html.parser')
        ul = soup.find('ul',class_ = 'auto_archive')
        dis = dict()
        li = ul.find_all('li')
        for i in li:
            name = i.span.text.split('â')[0].strip()
            link_date = [i.a["href"],i.a.text]
            #to order according to date(which is a string)
            if(dis.get(name)==None):
                dis[name] = link_date
            else:
                #append later dates to the end
                del(dis[name])
                dis[name] = link_date

        i = 0
        info_dis = dict()
        for d in dis.keys():
            url = "https://www.who.int"+dis[d][0]
            res = requests.get(url)
            soup = BeautifulSoup(res.text,'html.parser')
            p = soup.find_all('p')[1].span.text
            p += soup.find_all('p')[2].span.text
            dis[d].append(p)
            i+=1
            info_dis[d] = dis[d]
            if(i==5):
                break
            
            
        for key in info_dis.keys():
            del(dis[key])

        return render_template("p_news.html",news = dis,others = info_dis)
    
    else:
        flash("Patient Login Required !", category="error")
        return redirect(url_for('login'))


@app.route("/patient/details",methods = ["POST","GET"])
def patient_details():
    if(request.method == "POST"):
        allergies = request.form["allergies"]
        immunizations = request.form["immunizations"]
        observations = request.form["observations"]
        procedures = request.form["procedures"]
        careplans = request.form["careplans"]
        medications = request.form["medications"]
        current = request.form["current"]
        flash("Patient Details Successfully Updated !!!",category="success")

        ## code to store this info in the database

        flash("Data Added Successfully !")
        return redirect(url_for("p_details"))
        

    return render_template("p_details.html")

    
##############################################
##### DOCTOR   ###############################
##############################################
@app.route("/doctor")
def d_home():
    if(check_correct_login("d")):
        return render_template("d_home.html")
    
    else:
        flash("Doctor Login Required !", category="error")
        return redirect(url_for('login'))
    
    
##############################################
##### HOSPITAL ###############################
##############################################
@app.route("/hospital")
def h_home():
    if(check_correct_login("h")):
        return render_template("h_home.html")

    else:
        flash("Hospital Staff Login Required !", category="error")
        return redirect(url_for('login'))
    
    
if __name__ == '__main__':
    if(status == "dev"):
        app.run(debug = True)
    else:
        app.run()

